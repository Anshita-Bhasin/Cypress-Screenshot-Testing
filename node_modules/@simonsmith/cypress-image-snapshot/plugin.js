"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addMatchImageSnapshotPlugin = void 0;
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const chalk_1 = __importDefault(require("chalk"));
const diff_snapshot_1 = require("jest-image-snapshot/src/diff-snapshot");
const constants_1 = require("./constants");
/**
 * Add this function in `setupNodeEvents` inside cypress.config.ts
 *
 * Required
 * @type {Cypress.PluginConfig}
 */
const addMatchImageSnapshotPlugin = (on) => {
    on('after:screenshot', runImageDiffAfterScreenshot);
    on('task', {
        [constants_1.MATCH]: setOptions,
        [constants_1.RECORD]: getSnapshotResult,
        [constants_1.RM]: removeSnapshot,
    });
};
exports.addMatchImageSnapshotPlugin = addMatchImageSnapshotPlugin;
// prevent the plugin running for general screenshots that aren't
// triggered by `matchImageSnapshot`
let isSnapshotActive = false;
let options = {};
const setOptions = (commandOptions) => {
    isSnapshotActive = true;
    options = commandOptions;
    return null;
};
const PNG_EXT = '.png';
const DEFAULT_DIFF_DIR = '__diff_output__';
let snapshotResult = {};
const getSnapshotResult = () => {
    isSnapshotActive = false;
    return snapshotResult;
};
const removeSnapshot = async (path) => {
    await promises_1.default.rm(path);
    return null;
};
const runImageDiffAfterScreenshot = async (screenshotConfig) => {
    const { path: screenshotPath } = screenshotConfig;
    if (!isSnapshotActive) {
        return { path: screenshotPath };
    }
    const receivedImageBuffer = await promises_1.default.readFile(screenshotPath);
    await promises_1.default.rm(screenshotPath);
    const { currentTestTitle, screenshotsFolder, isUpdateSnapshots, customSnapshotsDir, specFileRelativeToRoot, customDiffDir, e2eSpecDir, snapFilenameExtension, diffFilenameExtension, } = options;
    let snapshotName = node_path_1.default.basename(screenshotConfig.path, PNG_EXT);
    const dirName = node_path_1.default.dirname(screenshotConfig.path
        // remove the screenshots path and just leave folders to be created in
        // the snapshots folder
        .replace(node_path_1.default.normalize(screenshotConfig.specName), '')
        // remove specName here because in run mode it's added and duplicated.
        // In open mode it's an empty string so is ignored
        .replace(screenshotsFolder, ''));
    snapshotName = node_path_1.default
        .join(dirName, snapshotName)
        .replace(/ \(attempt [0-9]+\)/, '');
    log('snapshotName', snapshotName);
    log('screenshotConfig', screenshotConfig);
    const specDestination = specFileRelativeToRoot.replace(node_path_1.default.normalize(e2eSpecDir), '');
    const snapshotsDir = customSnapshotsDir
        ? node_path_1.default.join(process.cwd(), customSnapshotsDir, specDestination)
        : node_path_1.default.join(screenshotsFolder, '..', 'snapshots', specDestination);
    const snapshotNameFullPath = node_path_1.default.join(snapshotsDir, `${snapshotName}${PNG_EXT}`);
    const snapshotDotPath = node_path_1.default.join(snapshotsDir, `${snapshotName}${snapFilenameExtension}${PNG_EXT}`);
    const diffDir = customDiffDir
        ? node_path_1.default.join(process.cwd(), customDiffDir, specFileRelativeToRoot)
        : node_path_1.default.join(snapshotsDir, DEFAULT_DIFF_DIR);
    const diffDotPath = node_path_1.default.join(diffDir, `${snapshotName}${diffFilenameExtension}${PNG_EXT}`);
    logTestName(currentTestTitle);
    log('options', options);
    log('paths', {
        screenshotPath,
        snapshotsDir,
        diffDir,
        diffDotPath,
        snapshotName,
        snapshotNameFullPath,
        snapshotDotPath,
    });
    const isExist = await pathExists(snapshotDotPath);
    if (isExist) {
        await promises_1.default.copyFile(snapshotDotPath, snapshotNameFullPath);
    }
    snapshotResult = (0, diff_snapshot_1.diffImageToSnapshot)({
        ...options,
        snapshotsDir,
        diffDir,
        receivedImageBuffer,
        snapshotIdentifier: snapshotName,
        updateSnapshot: isUpdateSnapshots,
    });
    log('result from diffImageToSnapshot', (() => {
        const { imgSrcString, ...rest } = snapshotResult;
        return rest;
    })());
    const { pass, added, updated, diffOutputPath } = snapshotResult;
    if (!pass && !added && !updated) {
        log('image did not match');
        await promises_1.default.copyFile(diffOutputPath, diffDotPath);
        await promises_1.default.rm(diffOutputPath);
        await promises_1.default.rm(snapshotNameFullPath);
        snapshotResult.diffOutputPath = diffDotPath;
        log(`screenshot write to ${diffDotPath}...`);
        return {
            path: diffDotPath,
        };
    }
    if (pass) {
        log('snapshot matches');
    }
    if (added) {
        log('new snapshot generated');
    }
    if (updated) {
        log('snapshot updated with new version');
    }
    await promises_1.default.copyFile(snapshotNameFullPath, snapshotDotPath);
    // don't remove if the paths are the same, this can happen
    // if the user passes empty string for snapFilenameExtension
    if (snapshotNameFullPath !== snapshotDotPath) {
        await promises_1.default.rm(snapshotNameFullPath);
    }
    snapshotResult.diffOutputPath = snapshotDotPath;
    log(snapshotResult);
    log('screenshot write to snapshotDotPath');
    return {
        path: snapshotDotPath,
    };
};
async function pathExists(path) {
    try {
        await promises_1.default.stat(path);
        return true;
    }
    catch {
        return false;
    }
}
const log = (...message) => {
    // eslint-disable-line
    if (options.isSnapshotDebug) {
        console.log(chalk_1.default.blueBright.bold('matchImageSnapshot: '), ...message);
    }
};
const logTestName = (name) => {
    log(chalk_1.default.yellow.bold(name));
};
