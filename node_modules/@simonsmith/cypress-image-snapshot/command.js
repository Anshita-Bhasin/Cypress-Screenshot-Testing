"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addMatchImageSnapshotCommand = void 0;
const extend_1 = __importDefault(require("./util/extend"));
const constants_1 = require("./constants");
const COMMAND_NAME = 'cypress-image-snapshot';
const screenshotsFolder = Cypress.config('screenshotsFolder') || 'cypress/screenshots';
const isUpdateSnapshots = Cypress.env('updateSnapshots') || false;
const isSnapshotDebug = Cypress.env('debugSnapshots') || false;
const defaultOptions = {
    screenshotsFolder,
    isUpdateSnapshots,
    isSnapshotDebug,
    specFileRelativeToRoot: Cypress.spec.relative,
    e2eSpecDir: 'cypress/e2e/',
    currentTestTitle: '',
    failureThreshold: 0,
    failureThresholdType: 'pixel',
    snapFilenameExtension: '.snap',
    diffFilenameExtension: '.diff',
};
/**
 * Add this function to your `supportFile` for e2e/component
 * Accepts options that are used for all instances of `toMatchSnapshot`
 */
const addMatchImageSnapshotCommand = (defaultOptionsOverrides = {}) => {
    Cypress.Commands.add('matchImageSnapshot', {
        prevSubject: ['optional', 'element', 'document', 'window'],
    }, matchImageSnapshot(defaultOptionsOverrides));
};
exports.addMatchImageSnapshotCommand = addMatchImageSnapshotCommand;
const matchImageSnapshot = (defaultOptionsOverrides) => (subject, nameOrCommandOptions, commandOptions) => {
    // access the env here so that it can be overridden in tests
    const isFailOnSnapshotDiff = Cypress.env('failOnSnapshotDiff') !== false;
    const isRequireSnapshots = Cypress.env('requireSnapshots') || false;
    const { filename, options } = getNameAndOptions(nameOrCommandOptions, defaultOptionsOverrides, commandOptions);
    const elementToScreenshot = cy.wrap(subject);
    cy.task(constants_1.MATCH, {
        ...options,
        currentTestTitle: Cypress.currentTest.title,
    });
    const screenshotName = getScreenshotFilename(filename);
    elementToScreenshot.screenshot(screenshotName, options);
    return cy.task(constants_1.RECORD).then((snapshotResult) => {
        const { added, pass, updated, imageDimensions, diffPixelCount, diffRatio, diffSize, diffOutputPath, } = snapshotResult;
        if (added && isRequireSnapshots) {
            const message = `New snapshot: '${screenshotName}' was added, but 'requireSnapshots' was set to true.
            This is likely because this test was run in a CI environment in which snapshots should already be committed.`;
            cy.task(constants_1.RM, diffOutputPath).then(() => {
                if (isFailOnSnapshotDiff) {
                    throw new Error(message);
                }
                else {
                    Cypress.log({ name: COMMAND_NAME, message });
                    return;
                }
            });
        }
        if (!pass && !added && !updated) {
            const message = diffSize
                ? `Image size (${imageDimensions.baselineWidth}x${imageDimensions.baselineHeight}) different than saved snapshot size (${imageDimensions.receivedWidth}x${imageDimensions.receivedHeight}).\nSee diff for details: ${diffOutputPath}`
                : `Image was ${diffRatio * 100}% different from saved snapshot with ${diffPixelCount} different pixels.\nSee diff for details: ${diffOutputPath}`;
            if (isFailOnSnapshotDiff) {
                throw new Error(message);
            }
            else {
                Cypress.log({ name: COMMAND_NAME, message });
            }
        }
    });
};
const getNameAndOptions = (nameOrCommandOptions, defaultOptionsOverrides, commandOptions) => {
    let filename;
    let options = (0, extend_1.default)(true, {}, defaultOptions, defaultOptionsOverrides);
    if (typeof nameOrCommandOptions === 'string' && commandOptions) {
        filename = nameOrCommandOptions;
        options = (0, extend_1.default)(true, {}, defaultOptions, defaultOptionsOverrides, commandOptions);
    }
    if (typeof nameOrCommandOptions === 'string') {
        filename = nameOrCommandOptions;
    }
    if (typeof nameOrCommandOptions === 'object') {
        options = (0, extend_1.default)(true, {}, defaultOptions, defaultOptionsOverrides, nameOrCommandOptions);
    }
    return {
        filename,
        options,
    };
};
const getScreenshotFilename = (filename) => {
    if (filename) {
        return filename;
    }
    return Cypress.currentTest.titlePath.join(' -- ');
};
